BufferedReaderWriter:利用字符流的缓冲区来进行文本文件的复制
BufferedStreamCopy:利用字节流的缓冲区进行二进制文件的复制 
FileCopy:文本文件的复制
InPutStream:字节流的读取
OutPutStream:字节流的写入
Reader:字符流的读取
StreamCopy:二进制文件的复制
Writer:字符流的写入

所谓IO，也就是Input与Output的缩写。在java中，IO涉及的范围比较大，这里主要讨论针对文件内容的读写

对于文件内容的操作主要分为两大类,分别是：字符流  字节流

其中，字符流有两个抽象类：Writer   Reader

其对应子类FileWriter和FileReader可实现文件的读写操作

BufferedWriter和BufferedReader能够提供缓冲区功能，用以提高效率

同样，字节流也有两个抽象类：InputStream   OutputStream

其对应子类有FileInputStream和FileOutputStream实现文件读写

BufferedInputStream和BufferedOutputStream提供缓冲区功能

1.本文代码较长，不该省略的都没省略，主要是因为作为一个新手需要养成良好的代码编写习惯

2.代码中有些操作有多种执行方式，我采用了方式1...方式2...的表述，只需轻轻解开注释便可编译

3.代码中并没有在主方法上抛出异常，而是分别捕捉，造成代码过长，如果仅是测试，或者不想有好的编程习惯，那你就随便抛吧……

4.功能类似的地方就没有重复写注释了，如果新手看不懂下面的代码，那肯定是上面的没有理解清楚

        
初学者在学会使用字符流和字节流之后未免会产生疑问：什么时候该使用字符流，什么时候又该使用字节流呢？ 其实仔细想想就应该知道，所谓字符流，
肯定是用于操作类似文本文件或者带有字符文件的场合比较多,而字节流则是操作那些无法直接获取文本信息的二进制文件，比如图片，mp3，视频文件等    
说白了在硬盘上都是以字节存储的，只不过字符流在操作文本上面更方便一点而已。 此外，为什么要利用缓冲区呢？我们知道，像迅雷等下载软件都有个缓存的功能,
硬盘本身也有缓冲区 .试想一下，如果一有数据，不论大小就开始读写，势必会给硬盘造成很大负担，它会感觉很不爽 ,人不也一样，一顿饭不让你一次吃完，
每分钟喂一勺，你怎么想？因此，采用缓冲区能够在读写大文件的时候有效提高效率        
